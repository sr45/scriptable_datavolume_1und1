//Get data usage status off 1&1 mobile

let widget = new ListWidget()
widget.setPadding(16, 16, 16, 16)
let nextRefresh = Date.now() + 1000*30 // add 30 second to now
widget.refreshAfterDate = new Date(nextRefresh)

const spc = 3
let hourNow = new Date().getHours()

//Define nighttime (19h - 7h) for styling changes
var nightTime = (hourNow >= 19 || hourNow < 7)

//Title text
let titleTxt = widget.addText("1&1 Daten")
titleTxt.font= Font.boldSystemFont(18)
titleTxt.leftAlignText()
widget.addSpacer(spc)
widget.addSpacer(spc)

//Value text
let vlFnt = Font.semiboldSystemFont(24)

//Subtitle text
let ptFnt = Font.systemFont(10)
let ptCol

//Backgrund- & text colors
if (nightTime) {
  titleTxt.textColor = Color.lightGray()
  ptCol = Color.gray()
  const gradient = new LinearGradient()
  gradient.locations = [0, 1]
  gradient.colors = [
    new Color("192331"),
    new Color("222222")
  ]
  widget.backgroundGradient = gradient
}
else {
  titleTxt.textColor = Color.darkGray()
  ptCol = Color.darkGray()
}

await loadSite()

if (!config.runsInWidget) widget.presentSmall()
Script.setWidget(widget)
Script.complete()

async function loadSite() {
  //logMessage("refresh")
  let url='https://www.1und1.de/mobile-center'
  let wbv = new WebView()
  await wbv.loadURL(url)
  
  let js = `
     var arr = new Array()
     if (document.URL == "https://www.1und1.de/mobile-center-no-umts") {
      arr.push("true")
    } else {
      arr.push("false")
    }
    JSON.stringify(arr)
  `
  
   let res = await wbv.evaluateJavaScript(js)
  let wlan = JSON.parse(res)
  if (wlan[0]=="true") {
     let tx2 = widget.addText("Im WLAN nicht möglich!")
      tx2.leftAlignText()
      tx2.font = vlFnt
      tx2.textColor = Color.red()
  } else {
  //javasript to grab data from the website
  let jsc = `
  var arr = new Array()
  
  var used = document
    .getElementById("currentHighSpeedVolumeCount")
    .innerText
  arr.push(used)
  
  var volume = document
    .getElementById("maxHighSpeedVolumeCount")
    .innerText
  arr.push(volume)
  
  JSON.stringify(arr)
  `
  //Run the javascript
  let jsn = await wbv.evaluateJavaScript(jsc)
  //Parse the grabbed values into a variable
  let val = JSON.parse(jsn)
  //Assign the parts to single variables
  var usedvolume = val[0].replaceAll(" ", "").replaceAll("\n","").trim().replace("MB","")
  let maxvolume = val[1].replaceAll(" ", "").replaceAll("\n","").trim().replace("MB","")
  
  //Turn the html's grabbed RGB color values into HEX values
  let cc1 = Color.white()
  let cc2 = Color.white()
  
  //Function to do the RGB to HEX stuff
  function toHEX(col) {
    var a = col.split("(")[1].split(")")[0].replaceAll(" ", "")
    a = a.split(",")
    var b = a.map(function(x) {
    x = parseInt(x).toString(16)
    return (x.length==1) ? "0"+x : x
    })
    b = "0x"+b.join("")
    b = b.substring(2)
    return b
  }
  
  //Benutztes Volumen
  if (usedvolume != null) {
    let tx2 = widget.addText(usedvolume+ " MB")
      tx2.leftAlignText()
      tx2.font = vlFnt
      tx2.textColor = cc1
  }
  
  let tx1 = widget.addText("Verbraucht")
  tx1.textColor = ptCol
  tx1.font= ptFnt
  tx1.leftAlignText()
  widget.addSpacer(spc)
  
  //Verfügbares Volumen
  if (maxvolume != null) {
    let tx4 = widget.addText(maxvolume+" MB")
      tx4.leftAlignText()
      tx4.font = vlFnt
      tx4.textColor = cc2
  }
  
  let tx3 = widget.addText("Monatliches Volumen")
  tx3.textColor = ptCol
  tx3.font= ptFnt
  tx3.leftAlignText()
}
}
  
  function logMessage(theMessage){
	let oldData = ""
	let logManager = FileManager.iCloud()
	const logPath = logManager.joinPath(logManager.documentsDirectory(), "refreshlogDataVolume.txt")
	if (logManager.fileExists(logPath)){
		oldData = logManager.readString(logPath)+"\n"
	}
	let logTime = new Date()
	
	oldData += Script.name() + " : " + logTime.toLocaleDateString('en-US') + " " +logTime.toLocaleTimeString('en-US') + " : "+theMessage
	logManager.writeString(logPath,oldData)
	
	return logTime.toLocaleTimeString('en-US')
}